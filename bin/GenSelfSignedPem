#!/bin/bash

# --- SETUP --- #

umask go-rwx

COMMAND="$@"

# variables used and default set
HOST="*.example.org"
CERT_PATH=.cert
SUBJECT_ALT_NAME="DNS:localhost"

while [ $# -gt 0 ]; do
    case ${1} in
        --conf)
            shift 1
            if [ -f ${1} ]; then
                . ${1}
            else
                echo "${1} not found; Cowardly quiting"
                exit 1
            fi
            shift 1
            ;;
        *)
            echo "Unexpected option; GenSelfSignedPem ${COMMAND}"
            echo "USAGE: GenSelfSignedPem [--conf CONFIG_FILE]"
            exit 1
            ;;
    esac
done

# --- BEGIN --- #

[ -d ${CERT_PATH} ] || mkdir -p ${CERT_PATH}

# generate CA private and public keys
openssl genrsa -aes256 -out ${CERT_PATH}/ca-key.pem 4096
cat >${CERT_PATH}/config <<EOF
[ req ]
prompt = no
distinguished_name = req_distinguished_name
[ req_distinguished_name ]
C = TW
L = Taipei
O = MZ+
CN = ${HOST}
EOF
openssl req -new -x509 -days 365 -key ${CERT_PATH}/ca-key.pem -config ${CERT_PATH}/config -sha256 -out ${CERT_PATH}/ca.pem

# create a server key and certificate signing request (CSR)
openssl genrsa -out ${CERT_PATH}/server-key.pem 4096
openssl req -subj "/CN=${HOST}" -sha256 -new -key ${CERT_PATH}/server-key.pem -out ${CERT_PATH}/server.csr

# TLS connections can be made via IP address as well as DNS name, they need to
# be specified when creating the certificate
cat >${CERT_PATH}/extfile.cnf <<EOF
subjectAltName = ${SUBJECT_ALT_NAME}
EOF
cat ${CERT_PATH}/extfile.cnf

# sign our server key with generated CA
openssl x509 -req -days 365 -sha256 \
    -in ${CERT_PATH}/server.csr -CA ${CERT_PATH}/ca.pem -CAkey ${CERT_PATH}/ca-key.pem -CAcreateserial \
    -out ${CERT_PATH}/server-cert.pem \
    -extfile ${CERT_PATH}/extfile.cnf

# create a client key and certificate signing request
openssl genrsa -out ${CERT_PATH}/key.pem 4096
openssl req -subj '/CN=client' -new -key ${CERT_PATH}/key.pem -out ${CERT_PATH}/client.csr

# make the key suitable for client authentication
cat >${CERT_PATH}/extfile.cnf <<EOF
extendedKeyUsage = clientAuth
EOF

# sign our public key
openssl x509 -req -days 365 -sha256 \
    -in ${CERT_PATH}/client.csr -CA ${CERT_PATH}/ca.pem -CAkey ${CERT_PATH}/ca-key.pem -CAcreateserial \
    -out ${CERT_PATH}/cert.pem \
    -extfile ${CERT_PATH}/extfile.cnf

# remove certificate signing request
rm -v ${CERT_PATH}/client.csr ${CERT_PATH}/server.csr ${CERT_PATH}/config ${CERT_PATH}/extfile.cnf .srl

# concatenate key + cert for applications using combind certificate
cat ${CERT_PATH}/server-key.pem ${CERT_PATH}/server-cert.pem >${CERT_PATH}/server-key-cert.pem
cat ${CERT_PATH}/key.pem ${CERT_PATH}/cert.pem >${CERT_PATH}/key-cert.pem

# update permission
chmod -v 0400 ${CERT_PATH}/ca-key.pem ${CERT_PATH}/key.pem ${CERT_PATH}/server-key.pem ${CERT_PATH}/server-key-cert.pem ${CERT_PATH}/key-cert.pem
chmod -v 0444 ${CERT_PATH}/ca.pem ${CERT_PATH}/server-cert.pem ${CERT_PATH}/cert.pem
